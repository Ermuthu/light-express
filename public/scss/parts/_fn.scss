@charset "utf-8"; //解决中文报错
// css3 -webkit-,-moz-,-ms-,-o- 的前缀简写
// 第一个参数为属性和值，第二个参数则是前缀
@mixin prefix($map, $vendors: webkit mox ms o){
	@each $prop, $value in $map{
		@if $vendors {
			@each $vendor in $vendors {
				#{'-' + $vendor + '-' + $prop}:#{$value};
			}
		}
		// Dump regular property anyway
		#{$prop}:#{$value};
	}
}
// sass:
// .element {
//  @include prefix((transform: translate(-50%, -50%)), webkit ms);
// }
// Ouput:
// .element {
//  -webkit-transform: translate(-50%, -50%);
//  -ms-transform: translate(-50%, -50%);
//  transform: translate(-50%, -50%);
// }

@mixin cf(){
	*zoom:1;
	&:before,&:after{content:"";display:table;}
	&:after{clear:both;overflow:hidden;}
}

// inline-block
@mixin ib(){
	display:inline-block;*display:inline;*zoom:1;
	vertical-align:middle;//*vertical-align:auto;
}

// 通用居中样式
// 使用见_layout.scss
@mixin imge(){
	@extend %ib;font-size:12px;font-size:1rem;line-height:normal;
	@at-root img#{&},& img{max-width:100%;max-height:100%;} //大图片等比缩小至父元素大小
}
@mixin imgc(){
	font-size:0;_line-height:0;text-align:center;overflow:hidden;
	&:before,.iecp{@extend %ib;}
	&:before,.iecp{content:"";height:100%;font-size:0;line-height:0;width:0;}
}

// 单行溢出省略
@mixin sln(){overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}

%cf{@include cf();}
%ib{@include ib();}
%imge{@include imge();}
%imgc{@include imgc();}
%sln{@include sln();}

// webkit多行溢出省略
%mln{overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;}

@mixin opacity($val:0.5){
	opacity:$val;
	filter:alpha(opacity=$val*100);
}

// @param
// $color - 普通的十六进制颜色值 #123456
// $alpha - 透明度0 ~ 1
@mixin background-color-rgba($color, $alpha){
	$rgba:rgba($color,$alpha);
	$ie-hex-str:ie-hex-str($rgba);
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
	background-color:$rgba;
	@media screen and (min-width:0px){
		filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);
	}
}

@mixin size($width:auto, $height:$width){
	width:$width;
	height:$height;
}

@mixin user-select($val){
	@include prefix((user-select:$val), webkit moz);
}

@mixin box-sizing($mode:content-box){
	@include prefix((box-sizing:$mode), webkit moz);
}
@mixin boxSizing($mode:content-box){
	@include box-sizing($mode);
}

@mixin border-radius($n:0){
	@include prefix((border-radius:$n));
}
@mixin borderRadius($n:0){
	@include border-radius($n);
}
@mixin border-top-left-radius($n:0){
	@include prefix((border-top-left-radius:$n));
}
@mixin border-top-right-radius($n:0){
	@include prefix((border-top-right-radius:$n));
}
@mixin border-bottom-left-radius($n:0){
	@include prefix((border-bottom-left-radius:$n));
}
@mixin border-bottom-right-radius($n:0){
	@include prefix((border-bottom-right-radius:$n));
}

// position
// 使用：@include relative(top 1px left 1px)--->position:relative;left:1px;top:1px;
@mixin position($position,$args){
	@each $o in top right bottom left {
		$i: index($args, $o);
		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
			#{$o}: nth($args, $i + 1);
		}
	}
	position:unquote($position);
}
@mixin absolute($args:null){
	@include position("absolute", $args);
}
@mixin fixed($args:null){
	@include position("fixed", $args);
}
@mixin relative($args:null){
	@include position("relative", $args);
}
// 例：
// sass
// .element {
// 	@include absolute(top 0 left 1em);
// }
// Ouput
// .element {
// 	position: absolute;
// 	top: 0;
// 	left: 1em;
// }

@mixin button($width, $height, $bgcolor:transparent){
	@include size($width, $height);@include user-select(none);
	line-height:$height;text-align:center;background:$bgcolor;
	&:hover{background-color:lighten($bgcolor, 5%);}
	&:active{background-color:darken($bgcolor, 5%);outline:thin dotted;outline-offset:-2px;}
}


// Returns the opposite direction of each direction in a list
// @author Hugo Giraudel
// @param {List} $directions - List of initial directions
// @return {List} - List of opposite directions
@function opposite-direction($directions) {
	$opposite-directions:();
	$direction-map:(
		'top'    : 'bottom',
		'right'  : 'left',
		'bottom' : 'top',
		'left'   : 'right',
		'center' : 'center',
		'ltr'    : 'rtl',
		'rtl'    : 'ltr'
	);
	@each $direction in $directions {
		$direction: to-lower-case($direction);
		@if map-has-key($direction-map, $direction) {
			$opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
		} @else {
			@warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
		}
	}
	@return $opposite-directions;
}
// 例：scss
// .selector {
//   background-position: opposite-direction(top right);
// }
// css
// .selector {
//   background-position: bottom left;
// }

//生成 三角
@mixin triangle($direction, $position, $color:currentcolor, $size:1em) {
	$direction: if(function-exists("to-lower-case") == true, to-lower-case($direction), $direction);
	@if not index(top right bottom left, $direction) {
		@warn "Direction must be one of `top`, `right`, `bottom` or `left`; currently `#{$direction}`.";
	} @else {
		// Core stuff
		@include absolute($position);
		@include size(0);
		border-#{opposite-direction($direction)}: $size solid $color;
		$perpendicular-border: $size solid transparent;
		@if $direction == top or $direction == bottom {
			border-left:   $perpendicular-border;
			border-right:  $perpendicular-border;
		} @else if $direction == right or $direction == left {
			border-bottom: $perpendicular-border;
			border-top:    $perpendicular-border;
		}
	}
}

// 列：scss
// .selector{@include triangle(right,top 5px right -5px,#EA3434,5px);}
// css
// .selector {
// 	top: 5px;
// 	right: -5px;
// 	position: absolute;
// 	width: 0;
// 	height: 0;
// 	border-left: 5px solid #EA3434;
// 	border-bottom: 5px solid transparent;
// 	border-top: 5px solid transparent
// }

@mixin tip-box($direction, $position, $arrSize){
	$dirMap : ('top':'bottom', 'right':'left', 'bottom':'top', 'left':'right');
	$od     : map-get($dirMap, $direction);
	$n      : 1;
	@if index(right bottom, $direction){
		$n:2;
	}
	padding-#{$direction}:nth($arrSize, $n);
	.tip-content{
		position:relative;background:white;border-radius:8px;border:1px solid #ff8144;
		:before,:after,.before,.after{
			@include absolute($position);
			@include size(0);content:'';
			border-style:solid;
			border-color:transparent;
			border-#{$od}:10px solid #ff8144;
			@if index(top bottom, $direction){
				border-left-width  : nth($arrSize, 1);
				border-right-width : nth($arrSize, 2);
			}@else if index(left right, $direction){
				border-top-width    : nth($arrSize, 1);
				border-bottom-width : nth($arrSize, 2);
			}
		}
		:after,.after{
			@include absolute($direction nth($position, index($position, $direction)+1)+1);
			border-#{$od}-color:white;
		}
	}
}
// .tip{
// 	@include ib;width:100px;margin-top:15px;margin-right:15px;
// 	word-break:break-line;word-wrap:break-word;
// 	@include relative(top 10px left 14px);
// 	line-height:16px;color:#ff8144;
// 	.tip-content{padding:15px;}
// 	@include tip-box(top, left 13px top -13px, 10px 10px);
// }
